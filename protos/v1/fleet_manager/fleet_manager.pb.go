// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: protos/fleet_manager/v1/fleet_manager.proto

package fleet_manager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Command stream service
type CommandStreamCommands int32

const (
	CommandStreamCommands_COMMAND_STREAM_UNKNOWN CommandStreamCommands = 0
	CommandStreamCommands_FLOW_EXECUTE           CommandStreamCommands = 1
	CommandStreamCommands_FLOW_CANCEL            CommandStreamCommands = 2
	CommandStreamCommands_ROBOT_LIST             CommandStreamCommands = 3
	CommandStreamCommands_GET_CONFIGS            CommandStreamCommands = 4
	CommandStreamCommands_UPDATE_CONFIG          CommandStreamCommands = 5
	CommandStreamCommands_NAVIGATION             CommandStreamCommands = 6
	CommandStreamCommands_TRIGGER                CommandStreamCommands = 7
	CommandStreamCommands_BLOCK                  CommandStreamCommands = 8
)

// Enum value maps for CommandStreamCommands.
var (
	CommandStreamCommands_name = map[int32]string{
		0: "COMMAND_STREAM_UNKNOWN",
		1: "FLOW_EXECUTE",
		2: "FLOW_CANCEL",
		3: "ROBOT_LIST",
		4: "GET_CONFIGS",
		5: "UPDATE_CONFIG",
		6: "NAVIGATION",
		7: "TRIGGER",
		8: "BLOCK",
	}
	CommandStreamCommands_value = map[string]int32{
		"COMMAND_STREAM_UNKNOWN": 0,
		"FLOW_EXECUTE":           1,
		"FLOW_CANCEL":            2,
		"ROBOT_LIST":             3,
		"GET_CONFIGS":            4,
		"UPDATE_CONFIG":          5,
		"NAVIGATION":             6,
		"TRIGGER":                7,
		"BLOCK":                  8,
	}
)

func (x CommandStreamCommands) Enum() *CommandStreamCommands {
	p := new(CommandStreamCommands)
	*p = x
	return p
}

func (x CommandStreamCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandStreamCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[0].Descriptor()
}

func (CommandStreamCommands) Type() protoreflect.EnumType {
	return &file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[0]
}

func (x CommandStreamCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandStreamCommands.Descriptor instead.
func (CommandStreamCommands) EnumDescriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{0}
}

type CommandStreamActions int32

const (
	CommandStreamActions_COMMAND_ACTION_UNKNOWN CommandStreamActions = 0
	CommandStreamActions_CANCEL_GOAL            CommandStreamActions = 1
	CommandStreamActions_SEND_GOAL              CommandStreamActions = 2
	CommandStreamActions_HOME                   CommandStreamActions = 3
	CommandStreamActions_CHARGER                CommandStreamActions = 4
	CommandStreamActions_GOAT_RESPONSE          CommandStreamActions = 5
	CommandStreamActions_PAUSE_GOAL             CommandStreamActions = 6
	CommandStreamActions_RESUME_GOAL            CommandStreamActions = 7
	CommandStreamActions_BLOCK_ROBOT            CommandStreamActions = 8
	CommandStreamActions_UNBLOCK_ROBOT          CommandStreamActions = 9
)

// Enum value maps for CommandStreamActions.
var (
	CommandStreamActions_name = map[int32]string{
		0: "COMMAND_ACTION_UNKNOWN",
		1: "CANCEL_GOAL",
		2: "SEND_GOAL",
		3: "HOME",
		4: "CHARGER",
		5: "GOAT_RESPONSE",
		6: "PAUSE_GOAL",
		7: "RESUME_GOAL",
		8: "BLOCK_ROBOT",
		9: "UNBLOCK_ROBOT",
	}
	CommandStreamActions_value = map[string]int32{
		"COMMAND_ACTION_UNKNOWN": 0,
		"CANCEL_GOAL":            1,
		"SEND_GOAL":              2,
		"HOME":                   3,
		"CHARGER":                4,
		"GOAT_RESPONSE":          5,
		"PAUSE_GOAL":             6,
		"RESUME_GOAL":            7,
		"BLOCK_ROBOT":            8,
		"UNBLOCK_ROBOT":          9,
	}
)

func (x CommandStreamActions) Enum() *CommandStreamActions {
	p := new(CommandStreamActions)
	*p = x
	return p
}

func (x CommandStreamActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandStreamActions) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[1].Descriptor()
}

func (CommandStreamActions) Type() protoreflect.EnumType {
	return &file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[1]
}

func (x CommandStreamActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandStreamActions.Descriptor instead.
func (CommandStreamActions) EnumDescriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{1}
}

// Herd Service
type HerdActions int32

const (
	HerdActions_HERD_ACTION_UNKNOWN HerdActions = 0
	HerdActions_CREATE              HerdActions = 1
	HerdActions_UPDATE              HerdActions = 2
	HerdActions_DELETE              HerdActions = 3
	HerdActions_START               HerdActions = 4
	HerdActions_STOP                HerdActions = 5
	HerdActions_RESTART             HerdActions = 6
)

// Enum value maps for HerdActions.
var (
	HerdActions_name = map[int32]string{
		0: "HERD_ACTION_UNKNOWN",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
		4: "START",
		5: "STOP",
		6: "RESTART",
	}
	HerdActions_value = map[string]int32{
		"HERD_ACTION_UNKNOWN": 0,
		"CREATE":              1,
		"UPDATE":              2,
		"DELETE":              3,
		"START":               4,
		"STOP":                5,
		"RESTART":             6,
	}
)

func (x HerdActions) Enum() *HerdActions {
	p := new(HerdActions)
	*p = x
	return p
}

func (x HerdActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HerdActions) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[2].Descriptor()
}

func (HerdActions) Type() protoreflect.EnumType {
	return &file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[2]
}

func (x HerdActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HerdActions.Descriptor instead.
func (HerdActions) EnumDescriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{2}
}

// HerdIQ Telemetry (fleet states, dispatch states)
type HerdTelemetryActions int32

const (
	HerdTelemetryActions_HERD_TELEMETRY_UNKNOWN HerdTelemetryActions = 0
	HerdTelemetryActions_FLEET_STATES           HerdTelemetryActions = 1
	HerdTelemetryActions_DISAPTCH_STATES        HerdTelemetryActions = 2
)

// Enum value maps for HerdTelemetryActions.
var (
	HerdTelemetryActions_name = map[int32]string{
		0: "HERD_TELEMETRY_UNKNOWN",
		1: "FLEET_STATES",
		2: "DISAPTCH_STATES",
	}
	HerdTelemetryActions_value = map[string]int32{
		"HERD_TELEMETRY_UNKNOWN": 0,
		"FLEET_STATES":           1,
		"DISAPTCH_STATES":        2,
	}
)

func (x HerdTelemetryActions) Enum() *HerdTelemetryActions {
	p := new(HerdTelemetryActions)
	*p = x
	return p
}

func (x HerdTelemetryActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HerdTelemetryActions) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[3].Descriptor()
}

func (HerdTelemetryActions) Type() protoreflect.EnumType {
	return &file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes[3]
}

func (x HerdTelemetryActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HerdTelemetryActions.Descriptor instead.
func (HerdTelemetryActions) EnumDescriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{3}
}

type CommandSteamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName     string                `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Command      CommandStreamCommands `protobuf:"varint,2,opt,name=command,proto3,enum=v1.fleet_manager.CommandStreamCommands" json:"command,omitempty"`
	Action       CommandStreamActions  `protobuf:"varint,3,opt,name=action,proto3,enum=v1.fleet_manager.CommandStreamActions" json:"action,omitempty"`
	DeviceId     string                `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Robot        string                `protobuf:"bytes,5,opt,name=robot,proto3" json:"robot,omitempty"`
	Data         string                `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Status       bool                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Message      string                `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RequestId    string                `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Organization string                `protobuf:"bytes,10,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *CommandSteamRequest) Reset() {
	*x = CommandSteamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSteamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSteamRequest) ProtoMessage() {}

func (x *CommandSteamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSteamRequest.ProtoReflect.Descriptor instead.
func (*CommandSteamRequest) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CommandSteamRequest) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *CommandSteamRequest) GetCommand() CommandStreamCommands {
	if x != nil {
		return x.Command
	}
	return CommandStreamCommands_COMMAND_STREAM_UNKNOWN
}

func (x *CommandSteamRequest) GetAction() CommandStreamActions {
	if x != nil {
		return x.Action
	}
	return CommandStreamActions_COMMAND_ACTION_UNKNOWN
}

func (x *CommandSteamRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CommandSteamRequest) GetRobot() string {
	if x != nil {
		return x.Robot
	}
	return ""
}

func (x *CommandSteamRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CommandSteamRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CommandSteamRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandSteamRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommandSteamRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type CommandSteamRespose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName     string                `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Command      CommandStreamCommands `protobuf:"varint,2,opt,name=command,proto3,enum=v1.fleet_manager.CommandStreamCommands" json:"command,omitempty"`
	Action       CommandStreamActions  `protobuf:"varint,3,opt,name=action,proto3,enum=v1.fleet_manager.CommandStreamActions" json:"action,omitempty"`
	Status       bool                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Message      string                `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Robot        string                `protobuf:"bytes,6,opt,name=robot,proto3" json:"robot,omitempty"`
	DeviceId     string                `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Data         string                `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	RequestId    string                `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Organization string                `protobuf:"bytes,10,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *CommandSteamRespose) Reset() {
	*x = CommandSteamRespose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSteamRespose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSteamRespose) ProtoMessage() {}

func (x *CommandSteamRespose) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSteamRespose.ProtoReflect.Descriptor instead.
func (*CommandSteamRespose) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{1}
}

func (x *CommandSteamRespose) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *CommandSteamRespose) GetCommand() CommandStreamCommands {
	if x != nil {
		return x.Command
	}
	return CommandStreamCommands_COMMAND_STREAM_UNKNOWN
}

func (x *CommandSteamRespose) GetAction() CommandStreamActions {
	if x != nil {
		return x.Action
	}
	return CommandStreamActions_COMMAND_ACTION_UNKNOWN
}

func (x *CommandSteamRespose) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CommandSteamRespose) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandSteamRespose) GetRobot() string {
	if x != nil {
		return x.Robot
	}
	return ""
}

func (x *CommandSteamRespose) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CommandSteamRespose) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CommandSteamRespose) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommandSteamRespose) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type HerdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName     string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *HerdData) Reset() {
	*x = HerdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdData) ProtoMessage() {}

func (x *HerdData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdData.ProtoReflect.Descriptor instead.
func (*HerdData) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{2}
}

func (x *HerdData) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HerdData) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *HerdData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type HerdServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   HerdActions `protobuf:"varint,1,opt,name=action,proto3,enum=v1.fleet_manager.HerdActions" json:"action,omitempty"`
	DeviceId string      `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Data     *HerdData   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HerdServiceRequest) Reset() {
	*x = HerdServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdServiceRequest) ProtoMessage() {}

func (x *HerdServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdServiceRequest.ProtoReflect.Descriptor instead.
func (*HerdServiceRequest) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{3}
}

func (x *HerdServiceRequest) GetAction() HerdActions {
	if x != nil {
		return x.Action
	}
	return HerdActions_HERD_ACTION_UNKNOWN
}

func (x *HerdServiceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *HerdServiceRequest) GetData() *HerdData {
	if x != nil {
		return x.Data
	}
	return nil
}

type HerdServiceResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *HerdServiceResponseData) Reset() {
	*x = HerdServiceResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdServiceResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdServiceResponseData) ProtoMessage() {}

func (x *HerdServiceResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdServiceResponseData.ProtoReflect.Descriptor instead.
func (*HerdServiceResponseData) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{4}
}

func (x *HerdServiceResponseData) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HerdServiceResponseData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type HerdServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data    *HerdServiceResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Message string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HerdServiceResponse) Reset() {
	*x = HerdServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdServiceResponse) ProtoMessage() {}

func (x *HerdServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdServiceResponse.ProtoReflect.Descriptor instead.
func (*HerdServiceResponse) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{5}
}

func (x *HerdServiceResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HerdServiceResponse) GetData() *HerdServiceResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HerdServiceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RobotTelemetry service
type RobotTelemetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Robot    string `protobuf:"bytes,3,opt,name=robot,proto3" json:"robot,omitempty"`
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Data     string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RobotTelemetryData) Reset() {
	*x = RobotTelemetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotTelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotTelemetryData) ProtoMessage() {}

func (x *RobotTelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotTelemetryData.ProtoReflect.Descriptor instead.
func (*RobotTelemetryData) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{6}
}

func (x *RobotTelemetryData) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *RobotTelemetryData) GetRobot() string {
	if x != nil {
		return x.Robot
	}
	return ""
}

func (x *RobotTelemetryData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RobotTelemetryData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RobotTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Robot    string `protobuf:"bytes,3,opt,name=robot,proto3" json:"robot,omitempty"`
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Data     string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Status   bool   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Message  string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RobotTelemetryResponse) Reset() {
	*x = RobotTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotTelemetryResponse) ProtoMessage() {}

func (x *RobotTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotTelemetryResponse.ProtoReflect.Descriptor instead.
func (*RobotTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{7}
}

func (x *RobotTelemetryResponse) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *RobotTelemetryResponse) GetRobot() string {
	if x != nil {
		return x.Robot
	}
	return ""
}

func (x *RobotTelemetryResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RobotTelemetryResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RobotTelemetryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *RobotTelemetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HerdTelemetryReqest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName     string               `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Action       HerdTelemetryActions `protobuf:"varint,2,opt,name=action,proto3,enum=v1.fleet_manager.HerdTelemetryActions" json:"action,omitempty"`
	Data         string               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Organization string               `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *HerdTelemetryReqest) Reset() {
	*x = HerdTelemetryReqest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdTelemetryReqest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdTelemetryReqest) ProtoMessage() {}

func (x *HerdTelemetryReqest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdTelemetryReqest.ProtoReflect.Descriptor instead.
func (*HerdTelemetryReqest) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{8}
}

func (x *HerdTelemetryReqest) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HerdTelemetryReqest) GetAction() HerdTelemetryActions {
	if x != nil {
		return x.Action
	}
	return HerdTelemetryActions_HERD_TELEMETRY_UNKNOWN
}

func (x *HerdTelemetryReqest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HerdTelemetryReqest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type HerdTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName     string               `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Action       HerdTelemetryActions `protobuf:"varint,2,opt,name=action,proto3,enum=v1.fleet_manager.HerdTelemetryActions" json:"action,omitempty"`
	Data         string               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Status       bool                 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Message      string               `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Organization string               `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *HerdTelemetryResponse) Reset() {
	*x = HerdTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HerdTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HerdTelemetryResponse) ProtoMessage() {}

func (x *HerdTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HerdTelemetryResponse.ProtoReflect.Descriptor instead.
func (*HerdTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{9}
}

func (x *HerdTelemetryResponse) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HerdTelemetryResponse) GetAction() HerdTelemetryActions {
	if x != nil {
		return x.Action
	}
	return HerdTelemetryActions_HERD_TELEMETRY_UNKNOWN
}

func (x *HerdTelemetryResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HerdTelemetryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HerdTelemetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HerdTelemetryResponse) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// Navigation telemetry stream
type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Status   bool   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Message  string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{10}
}

func (x *HealthCheckRequest) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HealthCheckRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HealthCheckRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Status   bool   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Message  string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{11}
}

func (x *HealthCheckResponse) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *HealthCheckResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Docker stats telemetry stream
type DockerTelemetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu         float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory      float64 `protobuf:"fixed64,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ContainerId string  `protobuf:"bytes,4,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	NumOfProcs  uint64  `protobuf:"varint,6,opt,name=num_of_procs,json=numOfProcs,proto3" json:"num_of_procs,omitempty"`
	CurrentPid  uint64  `protobuf:"varint,7,opt,name=current_pid,json=currentPid,proto3" json:"current_pid,omitempty"`
	CreatedAt   string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string  `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version     string  `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DockerTelemetryData) Reset() {
	*x = DockerTelemetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerTelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerTelemetryData) ProtoMessage() {}

func (x *DockerTelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerTelemetryData.ProtoReflect.Descriptor instead.
func (*DockerTelemetryData) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{12}
}

func (x *DockerTelemetryData) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *DockerTelemetryData) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *DockerTelemetryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerTelemetryData) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DockerTelemetryData) GetNumOfProcs() uint64 {
	if x != nil {
		return x.NumOfProcs
	}
	return 0
}

func (x *DockerTelemetryData) GetCurrentPid() uint64 {
	if x != nil {
		return x.CurrentPid
	}
	return 0
}

func (x *DockerTelemetryData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DockerTelemetryData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DockerTelemetryData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DockerTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Status   bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DockerTelemetryRequest) Reset() {
	*x = DockerTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerTelemetryRequest) ProtoMessage() {}

func (x *DockerTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerTelemetryRequest.ProtoReflect.Descriptor instead.
func (*DockerTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{13}
}

func (x *DockerTelemetryRequest) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *DockerTelemetryRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DockerTelemetryRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DockerTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugName string               `protobuf:"bytes,1,opt,name=slug_name,json=slugName,proto3" json:"slug_name,omitempty"`
	Data     *DockerTelemetryData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Status   bool                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Message  string               `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DockerTelemetryResponse) Reset() {
	*x = DockerTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerTelemetryResponse) ProtoMessage() {}

func (x *DockerTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerTelemetryResponse.ProtoReflect.Descriptor instead.
func (*DockerTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP(), []int{14}
}

func (x *DockerTelemetryResponse) GetSlugName() string {
	if x != nil {
		return x.SlugName
	}
	return ""
}

func (x *DockerTelemetryResponse) GetData() *DockerTelemetryData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DockerTelemetryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DockerTelemetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_protos_fleet_manager_v1_fleet_manager_proto protoreflect.FileDescriptor

var file_protos_fleet_manager_v1_fleet_manager_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x76,
	0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22,
	0xf1, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x48,
	0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x17, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x12,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x72, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x76,
	0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x48, 0x65, 0x72, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x48, 0x65, 0x72, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48,
	0x65, 0x72, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x13, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x91, 0x02, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x16, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x17, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c,
	0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0xb2, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x08, 0x2a, 0xc1, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x45, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x10, 0x09, 0x2a, 0x6c, 0x0a, 0x0b,
	0x48, 0x65, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x45, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x14, 0x48, 0x65,
	0x72, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x4c, 0x45, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x41, 0x50, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x53, 0x10, 0x02, 0x32, 0xfc, 0x04, 0x0a, 0x0c, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x11, 0x48, 0x65, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x5d, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x12, 0x48, 0x65, 0x72, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x28, 0x2e, 0x76, 0x31, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0d, 0x48, 0x65, 0x72, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72,
	0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x64, 0x0a,
	0x0f, 0x48, 0x65, 0x72, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_fleet_manager_v1_fleet_manager_proto_rawDescOnce sync.Once
	file_protos_fleet_manager_v1_fleet_manager_proto_rawDescData = file_protos_fleet_manager_v1_fleet_manager_proto_rawDesc
)

func file_protos_fleet_manager_v1_fleet_manager_proto_rawDescGZIP() []byte {
	file_protos_fleet_manager_v1_fleet_manager_proto_rawDescOnce.Do(func() {
		file_protos_fleet_manager_v1_fleet_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_fleet_manager_v1_fleet_manager_proto_rawDescData)
	})
	return file_protos_fleet_manager_v1_fleet_manager_proto_rawDescData
}

var file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protos_fleet_manager_v1_fleet_manager_proto_goTypes = []any{
	(CommandStreamCommands)(0),      // 0: v1.fleet_manager.CommandStreamCommands
	(CommandStreamActions)(0),       // 1: v1.fleet_manager.CommandStreamActions
	(HerdActions)(0),                // 2: v1.fleet_manager.HerdActions
	(HerdTelemetryActions)(0),       // 3: v1.fleet_manager.HerdTelemetryActions
	(*CommandSteamRequest)(nil),     // 4: v1.fleet_manager.CommandSteamRequest
	(*CommandSteamRespose)(nil),     // 5: v1.fleet_manager.CommandSteamRespose
	(*HerdData)(nil),                // 6: v1.fleet_manager.HerdData
	(*HerdServiceRequest)(nil),      // 7: v1.fleet_manager.HerdServiceRequest
	(*HerdServiceResponseData)(nil), // 8: v1.fleet_manager.HerdServiceResponseData
	(*HerdServiceResponse)(nil),     // 9: v1.fleet_manager.HerdServiceResponse
	(*RobotTelemetryData)(nil),      // 10: v1.fleet_manager.RobotTelemetryData
	(*RobotTelemetryResponse)(nil),  // 11: v1.fleet_manager.RobotTelemetryResponse
	(*HerdTelemetryReqest)(nil),     // 12: v1.fleet_manager.HerdTelemetryReqest
	(*HerdTelemetryResponse)(nil),   // 13: v1.fleet_manager.HerdTelemetryResponse
	(*HealthCheckRequest)(nil),      // 14: v1.fleet_manager.HealthCheckRequest
	(*HealthCheckResponse)(nil),     // 15: v1.fleet_manager.HealthCheckResponse
	(*DockerTelemetryData)(nil),     // 16: v1.fleet_manager.DockerTelemetryData
	(*DockerTelemetryRequest)(nil),  // 17: v1.fleet_manager.DockerTelemetryRequest
	(*DockerTelemetryResponse)(nil), // 18: v1.fleet_manager.DockerTelemetryResponse
}
var file_protos_fleet_manager_v1_fleet_manager_proto_depIdxs = []int32{
	0,  // 0: v1.fleet_manager.CommandSteamRequest.command:type_name -> v1.fleet_manager.CommandStreamCommands
	1,  // 1: v1.fleet_manager.CommandSteamRequest.action:type_name -> v1.fleet_manager.CommandStreamActions
	0,  // 2: v1.fleet_manager.CommandSteamRespose.command:type_name -> v1.fleet_manager.CommandStreamCommands
	1,  // 3: v1.fleet_manager.CommandSteamRespose.action:type_name -> v1.fleet_manager.CommandStreamActions
	2,  // 4: v1.fleet_manager.HerdServiceRequest.action:type_name -> v1.fleet_manager.HerdActions
	6,  // 5: v1.fleet_manager.HerdServiceRequest.data:type_name -> v1.fleet_manager.HerdData
	8,  // 6: v1.fleet_manager.HerdServiceResponse.data:type_name -> v1.fleet_manager.HerdServiceResponseData
	3,  // 7: v1.fleet_manager.HerdTelemetryReqest.action:type_name -> v1.fleet_manager.HerdTelemetryActions
	3,  // 8: v1.fleet_manager.HerdTelemetryResponse.action:type_name -> v1.fleet_manager.HerdTelemetryActions
	16, // 9: v1.fleet_manager.DockerTelemetryResponse.data:type_name -> v1.fleet_manager.DockerTelemetryData
	4,  // 10: v1.fleet_manager.FleetManager.HerdCommandStream:input_type -> v1.fleet_manager.CommandSteamRequest
	7,  // 11: v1.fleet_manager.FleetManager.HerdServices:input_type -> v1.fleet_manager.HerdServiceRequest
	10, // 12: v1.fleet_manager.FleetManager.HerdRobotTelemetry:input_type -> v1.fleet_manager.RobotTelemetryData
	12, // 13: v1.fleet_manager.FleetManager.HerdTelemetry:input_type -> v1.fleet_manager.HerdTelemetryReqest
	14, // 14: v1.fleet_manager.FleetManager.HerdHealthCheck:input_type -> v1.fleet_manager.HealthCheckRequest
	17, // 15: v1.fleet_manager.FleetManager.DockerStatsTelemetry:input_type -> v1.fleet_manager.DockerTelemetryRequest
	5,  // 16: v1.fleet_manager.FleetManager.HerdCommandStream:output_type -> v1.fleet_manager.CommandSteamRespose
	9,  // 17: v1.fleet_manager.FleetManager.HerdServices:output_type -> v1.fleet_manager.HerdServiceResponse
	11, // 18: v1.fleet_manager.FleetManager.HerdRobotTelemetry:output_type -> v1.fleet_manager.RobotTelemetryResponse
	13, // 19: v1.fleet_manager.FleetManager.HerdTelemetry:output_type -> v1.fleet_manager.HerdTelemetryResponse
	15, // 20: v1.fleet_manager.FleetManager.HerdHealthCheck:output_type -> v1.fleet_manager.HealthCheckResponse
	18, // 21: v1.fleet_manager.FleetManager.DockerStatsTelemetry:output_type -> v1.fleet_manager.DockerTelemetryResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_protos_fleet_manager_v1_fleet_manager_proto_init() }
func file_protos_fleet_manager_v1_fleet_manager_proto_init() {
	if File_protos_fleet_manager_v1_fleet_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CommandSteamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CommandSteamRespose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HerdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HerdServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HerdServiceResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HerdServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RobotTelemetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RobotTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*HerdTelemetryReqest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HerdTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DockerTelemetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DockerTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DockerTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_fleet_manager_v1_fleet_manager_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_fleet_manager_v1_fleet_manager_proto_goTypes,
		DependencyIndexes: file_protos_fleet_manager_v1_fleet_manager_proto_depIdxs,
		EnumInfos:         file_protos_fleet_manager_v1_fleet_manager_proto_enumTypes,
		MessageInfos:      file_protos_fleet_manager_v1_fleet_manager_proto_msgTypes,
	}.Build()
	File_protos_fleet_manager_v1_fleet_manager_proto = out.File
	file_protos_fleet_manager_v1_fleet_manager_proto_rawDesc = nil
	file_protos_fleet_manager_v1_fleet_manager_proto_goTypes = nil
	file_protos_fleet_manager_v1_fleet_manager_proto_depIdxs = nil
}
