//
//##########################################################################################
//
//THIS PROTO IS DEPRECATED AND NOT USED IN LATEST VERSIONS
//LATEST VERSIONED AGENTS USE REST FOR COMMUNICATING BETWEEN WEB CLIENT /
//NODEJS AND SERVER.
//
//##########################################################################################

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: protos/node_sdk/v1/node_sdk.proto

package rcc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeSdk_ServiceCall_FullMethodName         = "/v1.rcc.NodeSdk/ServiceCall"
	NodeSdk_ActionCall_FullMethodName          = "/v1.rcc.NodeSdk/ActionCall"
	NodeSdk_Subscribe_FullMethodName           = "/v1.rcc.NodeSdk/Subscribe"
	NodeSdk_Unsubscribe_FullMethodName         = "/v1.rcc.NodeSdk/Unsubscribe"
	NodeSdk_GetTopics_FullMethodName           = "/v1.rcc.NodeSdk/GetTopics"
	NodeSdk_GetSubscribedTopics_FullMethodName = "/v1.rcc.NodeSdk/GetSubscribedTopics"
	NodeSdk_Publish_FullMethodName             = "/v1.rcc.NodeSdk/Publish"
)

// NodeSdkClient is the client API for NodeSdk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeSdkClient interface {
	ServiceCall(ctx context.Context, in *ServiceCallReqest, opts ...grpc.CallOption) (*ServiceCallResponse, error)
	ActionCall(ctx context.Context, in *ActionCallReqest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActionCallResponse], error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error)
	GetSubscribedTopics(ctx context.Context, in *GetSubscrbedTopicsRequest, opts ...grpc.CallOption) (*GetSubscrbedTopicsResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type nodeSdkClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeSdkClient(cc grpc.ClientConnInterface) NodeSdkClient {
	return &nodeSdkClient{cc}
}

func (c *nodeSdkClient) ServiceCall(ctx context.Context, in *ServiceCallReqest, opts ...grpc.CallOption) (*ServiceCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCallResponse)
	err := c.cc.Invoke(ctx, NodeSdk_ServiceCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSdkClient) ActionCall(ctx context.Context, in *ActionCallReqest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActionCallResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeSdk_ServiceDesc.Streams[0], NodeSdk_ActionCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ActionCallReqest, ActionCallResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeSdk_ActionCallClient = grpc.ServerStreamingClient[ActionCallResponse]

func (c *nodeSdkClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, NodeSdk_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSdkClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, NodeSdk_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSdkClient) GetTopics(ctx context.Context, in *GetTopicsRequest, opts ...grpc.CallOption) (*GetTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicsResponse)
	err := c.cc.Invoke(ctx, NodeSdk_GetTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSdkClient) GetSubscribedTopics(ctx context.Context, in *GetSubscrbedTopicsRequest, opts ...grpc.CallOption) (*GetSubscrbedTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscrbedTopicsResponse)
	err := c.cc.Invoke(ctx, NodeSdk_GetSubscribedTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeSdkClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, NodeSdk_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeSdkServer is the server API for NodeSdk service.
// All implementations must embed UnimplementedNodeSdkServer
// for forward compatibility.
type NodeSdkServer interface {
	ServiceCall(context.Context, *ServiceCallReqest) (*ServiceCallResponse, error)
	ActionCall(*ActionCallReqest, grpc.ServerStreamingServer[ActionCallResponse]) error
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	GetTopics(context.Context, *GetTopicsRequest) (*GetTopicsResponse, error)
	GetSubscribedTopics(context.Context, *GetSubscrbedTopicsRequest) (*GetSubscrbedTopicsResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	mustEmbedUnimplementedNodeSdkServer()
}

// UnimplementedNodeSdkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeSdkServer struct{}

func (UnimplementedNodeSdkServer) ServiceCall(context.Context, *ServiceCallReqest) (*ServiceCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCall not implemented")
}
func (UnimplementedNodeSdkServer) ActionCall(*ActionCallReqest, grpc.ServerStreamingServer[ActionCallResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ActionCall not implemented")
}
func (UnimplementedNodeSdkServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNodeSdkServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedNodeSdkServer) GetTopics(context.Context, *GetTopicsRequest) (*GetTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedNodeSdkServer) GetSubscribedTopics(context.Context, *GetSubscrbedTopicsRequest) (*GetSubscrbedTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribedTopics not implemented")
}
func (UnimplementedNodeSdkServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedNodeSdkServer) mustEmbedUnimplementedNodeSdkServer() {}
func (UnimplementedNodeSdkServer) testEmbeddedByValue()                 {}

// UnsafeNodeSdkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeSdkServer will
// result in compilation errors.
type UnsafeNodeSdkServer interface {
	mustEmbedUnimplementedNodeSdkServer()
}

func RegisterNodeSdkServer(s grpc.ServiceRegistrar, srv NodeSdkServer) {
	// If the following call pancis, it indicates UnimplementedNodeSdkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeSdk_ServiceDesc, srv)
}

func _NodeSdk_ServiceCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCallReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).ServiceCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_ServiceCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).ServiceCall(ctx, req.(*ServiceCallReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSdk_ActionCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionCallReqest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeSdkServer).ActionCall(m, &grpc.GenericServerStream[ActionCallReqest, ActionCallResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeSdk_ActionCallServer = grpc.ServerStreamingServer[ActionCallResponse]

func _NodeSdk_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSdk_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSdk_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_GetTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).GetTopics(ctx, req.(*GetTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSdk_GetSubscribedTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscrbedTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).GetSubscribedTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_GetSubscribedTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).GetSubscribedTopics(ctx, req.(*GetSubscrbedTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeSdk_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeSdkServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeSdk_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeSdkServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeSdk_ServiceDesc is the grpc.ServiceDesc for NodeSdk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeSdk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.rcc.NodeSdk",
	HandlerType: (*NodeSdkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceCall",
			Handler:    _NodeSdk_ServiceCall_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _NodeSdk_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _NodeSdk_Unsubscribe_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _NodeSdk_GetTopics_Handler,
		},
		{
			MethodName: "GetSubscribedTopics",
			Handler:    _NodeSdk_GetSubscribedTopics_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _NodeSdk_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActionCall",
			Handler:       _NodeSdk_ActionCall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/node_sdk/v1/node_sdk.proto",
}
