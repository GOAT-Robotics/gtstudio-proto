syntax = "proto3";

package v1.rcc;

import "protos/model/v1/config.proto";
import "protos/model/v1/commands.proto";
import "protos/model/v1/datapoint.proto";
import "protos/model/v1/ros.proto";


option go_package="github.com/TeamDotworld/robotix-proto/protos/v1/rcc";

service Agent { 

    rpc AuthenticateAgent(AuthRequest) returns (AuthResponse){}

    /* GetAgentConfiguration returns the Agent configuration. */
    rpc GetAgentConfiguration(GetAgentConfigurationRequest)
     returns (GetAgentConfigurationResponse) {
    }

    /* Health can be used to check if the Agent is running and its gRPC API is
    * available. */
    rpc Health(stream HealthResponse) returns (stream HealthRequest) {
    }

    rpc GetCommandRequestStream(GetCommandRequestStreamRequest)
    returns (stream GetCommandRequestStreamResponse) {
    }

    rpc GetSubscriptionRequestStream(stream GetSubscriptionRequestStreamResponse) returns (stream GetSubscriptionRequestStreamRequest) {}


    /* SendCommandResponse sends a response to a command request. */
    rpc SendCommandResponse(SendCommandResponseRequest)
        returns (SendCommandResponseResponse) {
    }

    rpc SendCommandResponseStream(stream SendCommandResponseRequest)
    returns (stream SendCommandResponseResponse) {
}

    rpc PostData(model.Datapoint) returns (PostDataResponse) {
    }

    rpc PostMultiData(PostMultiDataRequest) returns (PostMultiDataResponse) {
    }

    /* StreamData accepts a stream of data points. See PostData for information on
    * expected error conditions and codes. */
    rpc StreamData(stream model.Datapoint) returns (StreamDataResponse) {
    }

    rpc ReceiveRosMessages(stream RecieveRosMessagesResponse) returns (stream RecieveRosMessagesRequest) {}
}

message AuthRequest{
    string token = 1;
}

message AuthResponse {
    bool status = 1;
    string device_id = 2;
}


message GetAgentConfigurationRequest {
}

message GetAgentConfigurationResponse {
  model.AgentConfigurationStore configuration = 1 ;
}

message HealthRequest {
    string id=1;
}

message HealthResponse {
    string request_id=1;
}

message SendCommandResponseRequest {
model.CommandResponse response = 1;
}

message Error {
    string message = 1;
    string code = 2;
}

message SendCommandResponseResponse {
    bool status = 1;
    Error error = 2;
}

message GetCommandRequestStreamRequest {
}

message GetCommandRequestStreamResponse {
model.CommandRequest request = 1;
}

message PostDataResponse {
    bool status = 1;
}

message PostMultiDataRequest {
    repeated model.Datapoint data = 1;
}

message PostMultiDataResponse {
    bool status = 1;
}

message StreamDataResponse {
}

message GetSubscriptionRequestStreamResponse{
    string request_id = 1;
    bool status = 2;
    string error = 3;
    oneof data {
        model.Topics topics = 4;
    }
}

message GetSubscriptionRequestStreamRequest {
    string id = 1;
    model.StreamConfiguration topic = 2;
    string action = 3;
}

message RecieveRosMessagesRequest {
    string id = 1;
    model.Datapoint data = 2;
}

message RecieveRosMessagesResponse {
    string request_id = 1;
    bool status = 2;
    string error = 3;
}