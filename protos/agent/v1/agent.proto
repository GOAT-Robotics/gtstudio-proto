syntax = "proto3";

package v1.agent;

import "protos/model/v1/text.proto";
import "protos/model/v1/config.proto";
import "protos/model/v1/commands.proto";
import "protos/model/v1/datapoint.proto";
import "protos/model/v1/ros.proto";



option go_package = "github.com/TeamDotworld/robotix-proto/protos/v1/agent";

service AgentRosBridge { 

    /* GetAgentConfiguration returns the Agent configuration. */
    rpc GetAgentConfiguration(GetAgentConfigurationRequest)
        returns (GetAgentConfigurationResponse) {
    }

    rpc GetRosSubscriptionConfig(GetRosSubscriptionConfigRequest)
        returns (GetRosSubscriptionConfigResponse) {
    }

    rpc GetRosCommandConfig (GetRosCommandConfigRequest) returns (GetRosCommandConfigResponse) {}


    /* Health can be used to check if the Agent is running and its gRPC API is
    * available. */
    rpc Health(HealthRequest) returns (HealthResponse) {
    }

    rpc GetCommandRequestStream(GetCommandRequestStreamRequest)
    returns (stream GetCommandRequestStreamResponse) {
    }

    rpc GetSubscriptionRequestStream(stream GetSubscriptionRequestStreamResponse) returns (stream GetSubscriptionRequestStreamRequest) {}

    /* SendCommandResponse sends a response to a command request. */
    rpc SendCommandResponse(SendCommandResponseRequest)
        returns (SendCommandResponseResponse) {
    }

    rpc SendCommandResponseStream(stream SendCommandResponseRequest)
    returns (stream SendCommandResponseResponse) {}

    rpc PostData(model.Datapoint) returns (PostDataResponse) {
    }

    rpc PostMultiData(PostMultiDataRequest) returns (PostMultiDataResponse) {
    }

    /* StreamData accepts a stream of data points. See PostData for information on
    * expected error conditions and codes. */
    rpc StreamData(model.Datapoint ) returns (stream StreamDataRequest) {
    }

    rpc ReceiveRosMessages(stream RecieveRosMessagesResponse) returns (stream RecieveRosMessagesRequest) {}

}


message Json {
    string value = 1;
}


message GetAgentConfigurationRequest {
}

message GetAgentConfigurationResponse {
  model.AgentConfiguration configuration = 1;
}

message HealthRequest {
}

message HealthResponse {
}

message SendCommandResponseRequest {
model.CommandResponse response = 1;
}

message Error {
    string message = 1;
    string code = 2;
}

message SendCommandResponseResponse {
    bool status = 1;
    Error error = 2;
}

message GetCommandRequestStreamRequest {
repeated string command_filter = 1;
}

message GetCommandRequestStreamResponse {
model.CommandRequest request = 1;
}

message PostDataResponse {
    bool status = 1;
}

message PostMultiDataRequest {
    repeated model.Datapoint data = 1;
}

message PostMultiDataResponse {
    bool status = 1;
}

message StreamDataRequest {
    bool teleop_status = 1;
}

// message StreamDataResponse {
//     repeated model.Datapoint messages = 1;
// }

message GetRosCommandConfigRequest{}

message GetRosCommandConfigResponse {
    string config = 1;
}

message GetRosSubscriptionConfigRequest {
}

message GetRosSubscriptionConfigResponse {
    Json config = 1;
}

message GetSubscriptionRequestStreamResponse{
    string request_id = 1;
    bool status = 2;
    string error = 3;
    oneof data {
        model.Topics topics = 4;
    }
}

message GetSubscriptionRequestStreamRequest {
    string id = 1;
    model.StreamConfiguration topic = 2;
    string action = 3;
}

message RecieveRosMessagesRequest {
    string id = 1;
    model.ControlDatapoint control_datapoint = 2;
}

message RecieveRosMessagesResponse {
    string request_id = 1;
    bool status = 2;
    string error = 3;
}